# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.


#This stuff is for OPEN-R and mispel-linux-g++
CXXFLAGS= -O2 -g -I. 
OPENRSDK_ROOT=/usr/local/OPEN_R_SDK

#uncomment the following 3 lines to compile for the robot
#ARCHIVER=/usr/local/OPEN_R_SDK/bin/mipsel-linux-ar
#CXX= /usr/local/OPEN_R_SDK/bin/mipsel-linux-g++
#DESTINATION_LIB=../../libsMips/

DESTINATION_LIB=../../lib/
ARCHIVER = ar


# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /usr/local/gtest

# Where to find user code.
SOURCE_DIR = ../src

# Where to find the tests for user code.
TEST_DIR = ../tests

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR) -I$(GTEST_DIR)/include -I../include 

# Flags passed to the C++ compiler.
CXXFLAGS += -g

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Source files to compile with relative path
#SOURCES = $(shell ls ../src/*cpp)
SOURCE_PATHS = $(shell find ../src -name "*cpp")
SOURCES = $(foreach source, $(SOURCE_PATHS), $(subst ../src/, , $(source) ))
SOURCE_DIRS = $(dir $(SOURCE_PATHS))

# Object files to link with no path
OBJECTS = $(notdir $(SOURCES:.cpp=.o))

# Test files to compile
TEST_SOURCES = $(shell ls ../tests/*cpp) 
TEST_OBJECTS = $(notdir $(TEST_SOURCES:.cpp=.o))

# House-keeping build targets.
all : $(OBJECTS)

clean :
	rm -f *.*

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -g $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

VPATH = $(SOURCE_DIR) $(TEST_DIR) $(SOURCE_DIRS)

# compile source files
%.o : $(SOURCE_DIR)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $^

#create library (this should only be run with the tests...)
libLocalization.a: $(OBJECTS)
	$(ARCHIVER) -rc "libLocalization.a" $(OBJECTS)
	#ar -rc "libLocalization.a" $(OBJECTS)

# compile test files
%.o : $(TEST_DIR)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $^

# create test executable
tests.exe : libLocalization.a $(TEST_OBJECTS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TEST_OBJECTS) $(OBJECTS) -L../../libs -lUtilities gtest_main.a -o $@

#run tests 
FILTER = *
test:  tests.exe
	./tests.exe --gtest_filter=$(FILTER) --gtest_output="xml"

#creates the library and copies it to the libs folder of the project
deploy: libLocalization.a
	cp libLocalization.a $(DESTINATION_LIB)
	cp ../src/**.h ../include	